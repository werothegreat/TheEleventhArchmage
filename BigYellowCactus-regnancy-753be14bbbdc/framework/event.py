#!/usr/bin/python
# -*- coding: utf-8 -*-

from weakref import WeakKeyDictionary
import logging

class CPUSpinnerController(object):

    def __init__(self):
        self.keepGoing = True

    def run(self, ev):
        while self.keepGoing:
            TickEvent().post(ev)

    def notify(self, event):
        if isinstance(event, QuitEvent):
            self.keepGoing = False

class EventLogger(object):

    def notify(self, event):
        if isinstance(event, Event):
            logging.debug(event)

class EventManager(object):

    def __init__(self):
        self.listeners = WeakKeyDictionary()

    def register_listener(self, listener):
        assert hasattr(listener, "notify")
        (self.listeners)[listener] = True

    def unregister_listener(self, listener):
        if listener in self.listeners.keys():
            del (self.listeners)[listener]

    def post(self, event):
        for listener in self.listeners.keys():
            method = None
            try:
                method = getattr(listener, 'handle_' + event.__class__.__name__.lower())
            except AttributeError:
                pass
            if method:
                method(event)
            listener.notify(event)

class Event(object):

    """this is a superclass for any events that might be generated by an object and sent to the EventManager"""

    def post(self, ev):
        assert ev, "No event handler!"
        ev.post(self)


class TickEvent(Event):

    pass


class QuitEvent(Event):

    pass


class ResetEvent(Event):

    pass


class RequestChangeName(Event):

    def __init__(self, name):
        self.name = name.encode('utf8')


class RequestStartGame(Event):

    def __init__(self, deck_name):
        self.deck_name = deck_name


class MessageEvent(Event):

    def __init__(self, message, reciever=None):
        self.message = message
        self.reciever = reciever


class RequestConnectEvent(Event):

    def __init__(self, host, port):
        assert host
        assert isinstance(port, int)
        self.con_data = (host, port)


class ConnectionSuccess(Event):

    def __init__(self, server, port, id):
        assert server
        assert isinstance(port, int)
        self.server = server
        self.port = port
        self.id = id


class ConnectionFailed(Event):

    def __init__(self, server, port):
        self.name = "ConnectionFailed Event"
        assert server
        assert isinstance(port, int)
        self.server = server
        self.port = port

class ChangeHandEvent(Event):
    
    def __init__(self, player):
        self.player = player

class ChangeBoardEvent(Event):
    
    def __init__(self, player):
        self.player = player

class ChangePhaseEvent(Event):
    
    def __init__(self, player, phase):
        self.player = player
        self.phase = phase


class ChangeSubPhaseEvent(Event):
    
    def __init__(self, card_id, player, subphase, info=None):
        self.player = player
        self.card_id = card_id
        self.info = info
        self.subphase = subphase

class ChangePilesEvent(Event):
    
    def __init__(self):
        pass

class GameEndEvent(Event):

    def __init__(self, result):
        self.result = result

class GameStartedEvent(Event):

    pass


class NewHandEvent(Event):

    def __init__(self, hand, deck):
        self.hand = hand
        self.deck = deck


class NewBoardEvent(Event):

    def __init__(self, board):
        self.board = board


class NewBoardSetupEvent(Event):

    def __init__(self, boardsetup):
        self.boardsetup = boardsetup


class NewBoardCommonEvent(Event):

    def __init__(self, boardcommon):
        self.boardcommon = boardcommon


class PhaseChangedEvent(Event):

    def __init__(self, phase):
        self.phase = phase


class GlobalPhaseChangedEvent(Event):

    def __init__(self, phase):
        self.phase = phase


class SubPhaseChangedEvent(Event):

    def __init__(self, subphase, info, subid):
        self.subphase = subphase
        self.info = info
        self.subid = subid


class SetMasterEvent(Event):

    def __init__(self, master):
        self.master = master


class AnswerEvent(Event):

    def __init__(self, answer):
        self.answer = answer

class PlayerInfoEvent(Event):

    def __init__(self, playerinfos):
        self.playerinfos = playerinfos

class EndPhaseEvent(Event):

    def __init__(self, phase=None):
        self.phase = phase


class EndGameEvent(Event):

    def __init__(self, result):
        self.result = result


class BuyCardEvent(Event):

    def __init__(self, pile_id):
        self.pile_id = pile_id


class PlayCardEvent(Event):

    def __init__(self, card_id):
        self.card_id = card_id


